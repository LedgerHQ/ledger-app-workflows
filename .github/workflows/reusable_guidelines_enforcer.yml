name: Ensure app compliance with Ledger guidelines

on:
  workflow_call:
    inputs:
      app_repository:
        description: 'The GIT repository to build (defaults to `github.repository`)'
        required: false
        default: ${{ github.repository }}
        type: string
      run_for_devices:
        description: |
          The list of device(s) on which the test will run.

          Defaults to the full list of device(s) supported by the application as configured in the
          'ledger_app.toml' manifest.
          If the manifest is missing, defaults to ALL (["nanos", "nanox", "nanosp", "stax", "flex", "apex_m", "apex_p"]).
        required: false
        default: 'None'
        type: string
    secrets:
      git_token:
        description: 'A token used as authentication for GIT operations. Useful when including this workflow in a private repository.'
        required: false

permissions:
  contents: read
  actions: write  # Needed for _get_app_manifest.yml and _check_*.yml workflows

env:
  APP_REPOSITORY: ${{ inputs.app_repository }}
  RUN_FOR_DEVICES: ${{ inputs.run_for_devices }}

jobs:
  # We can't simply know the current ledger-app-workflow ref from inside the reusable workflow
  # We use the workaround linked in the following Github issue until a proper API is available at Github API level
  # https://github.com/actions/toolkit/issues/1264
  call_get_workflow_version:
    name: Get workflow version
    uses: ./.github/workflows/_get_workflow_version.yaml
    with:
      repository_name: LedgerHQ/ledger-app-workflows
      file_name: reusable_guidelines_enforcer.yml
    secrets:
      git_token: ${{ secrets.git_token }}

  call_get_app_metadata:
    # This job digests inputs and repository metadata provided by the `ledger_app.toml` manifest
    # file, in order to output relevant directories, compatible devices, and other variables needed
    # by following jobs.
    name: Retrieve application metadata
    uses: ./.github/workflows/_get_app_metadata.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      compatible_devices: ${{ inputs.run_for_devices }}

  call_get_app_manifest:
    name: Dump app information
    needs: [call_get_workflow_version, call_get_app_metadata]
    uses: ./.github/workflows/_get_app_manifest.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      workflows_ref: ${{ needs.call_get_workflow_version.outputs.version }}
      run_for_devices: ${{ needs.call_get_app_metadata.outputs.compatible_devices }}
      relative_app_directory: ${{ needs.call_get_app_metadata.outputs.build_directory }}
      is_rust: ${{ needs.call_get_app_metadata.outputs.is_rust }}
      upload_manifest_artifact_name: manifests

  call_check_icons:
    name: Dispatch check
    needs: [call_get_app_metadata, call_get_workflow_version, call_get_app_manifest]
    uses: ./.github/workflows/_check_icons.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      download_manifest_artifact_name: manifests
      workflows_ref: ${{ needs.call_get_workflow_version.outputs.version }}
      run_for_devices: ${{ needs.call_get_app_metadata.outputs.compatible_devices }}

  call_check_app_load_params:
    name: Dispatch check
    needs: [call_get_workflow_version, call_get_app_manifest]
    uses: ./.github/workflows/_check_app_load_params.yml
    with:
      download_manifest_artifact_name: manifests
      workflows_ref: ${{ needs.call_get_workflow_version.outputs.version }}

  call_check_makefile:
    name: Dispatch check
    needs: [call_get_app_metadata, call_get_workflow_version, call_get_app_manifest]
    uses: ./.github/workflows/_check_makefile.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      download_manifest_artifact_name: manifests
      workflows_ref: ${{ needs.call_get_workflow_version.outputs.version }}
      run_for_devices: ${{ needs.call_get_app_metadata.outputs.compatible_devices }}

  call_check_readme:
    name: Dispatch check
    needs: call_get_workflow_version
    uses: ./.github/workflows/_check_readme.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      workflows_ref: ${{ needs.call_get_workflow_version.outputs.version }}

  call_clang_static_analyzer:
    name: Dispatch check
    needs: [call_get_app_metadata, call_get_workflow_version]
    uses: ./.github/workflows/_check_clang_static_analyzer.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      run_for_devices: ${{ needs.call_get_app_metadata.outputs.compatible_devices }}
      relative_app_directory: ${{ needs.call_get_app_metadata.outputs.build_directory }}
      is_rust: ${{ needs.call_get_app_metadata.outputs.is_rust }}
      workflows_ref: ${{ needs.call_get_workflow_version.outputs.version }}

  call_clang_static_analyzer_latest_sdk:
    name: Dispatch check
    needs: [call_get_app_metadata, call_get_workflow_version]
    uses: ./.github/workflows/_check_clang_static_analyzer_latest_sdk.yml
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'scan_on_latest_sdk')
    with:
      app_repository: ${{ inputs.app_repository }}
      run_for_devices: ${{ needs.call_get_app_metadata.outputs.compatible_devices }}
      relative_app_directory: ${{ needs.call_get_app_metadata.outputs.build_directory }}
      is_rust: ${{ needs.call_get_app_metadata.outputs.is_rust }}
      workflows_ref: ${{ needs.call_get_workflow_version.outputs.version }}
