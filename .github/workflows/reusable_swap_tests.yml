name: Run Swap Functional tests

on:
  workflow_call:
    inputs:
      app_repository:
        description: 'The GIT repository to test (defaults to `github.repository`)'
        required: false
        default: ${{ github.repository }}
        type: string
      app_branch_name:
        description: 'The GIT branch to test (defaults to `github.ref`)'
        required: false
        default: ${{ github.ref }}
        type: string
      download_app_binaries_artifact:
        required: false
        default: ''
        description: 'If not provided, the workflow will build the app to test.'
        type: string
      exchange_build_artifact:
        required: false
        default: ''
        description: 'If not provided, the workflow will build the Exchange app.'
        type: string
      ethereum_build_artifact:
        required: false
        default: ''
        description: 'If not provided, the workflow will build the Ethereum app.'
        type: string
      regenerate_snapshots:
        required: false
        default: false
        type: boolean

permissions:
  contents: write       # Needed for reusable_ragger_tests.yml
  actions: write        # Needed for reusable_ragger_tests.yml and reusable_build.yml
  pull-requests: write  # Needed for reusable_ragger_tests.yml

env:
  APP_REPOSITORY: ${{ inputs.app_repository }}
  APP_BRANCH_NAME: ${{ inputs.app_branch_name }}
  DOWNLOAD_APP_BINARIES_ARTIFACT: ${{ inputs.download_app_binaries_artifact }}
  EXCHANGE_BUILD_ARTIFACT: ${{ inputs.exchange_build_artifact }}
  ETHEREUM_BUILD_ARTIFACT: ${{ inputs.ethereum_build_artifact }}
  REGENERATE_SNAPSHOTS: ${{ inputs.regenerate_snapshots }}

jobs:
  build_app:
    name: Build app to test using the reusable workflow
    if: ${{ inputs.download_app_binaries_artifact == '' }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      app_branch_name: ${{ inputs.app_branch_name }}
      upload_app_binaries_artifact: "app_binaries"

  build_exchange:
    name: Build Exchange app using the reusable workflow
    if: ${{ inputs.exchange_build_artifact == '' }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      app_repository: 'LedgerHQ/app-exchange'
      app_branch_name: 'develop'
      upload_app_binaries_artifact: "app_exchange_binaries"
      use_case: 'use_test_keys'

  build_ethereum:
    name: Build Ethereum app using the reusable workflow
    if: ${{ inputs.ethereum_build_artifact == '' }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      app_repository: 'LedgerHQ/app-ethereum'
      app_branch_name: 'develop'
      upload_app_binaries_artifact: "app_ethereum_binaries"
      use_case: 'use_test_keys'

  get_artifacts_names:
    name: Retrieve artifact names
    needs: [build_exchange, build_ethereum]
    if: ${{ always() }}
    outputs:
      exchange_build_artifact: ${{ steps.get_exchange_binaries.outputs.exchange_build_artifact }}
      ethereum_build_artifact: ${{ steps.get_ethereum_binaries.outputs.ethereum_build_artifact }}
    runs-on: ubuntu-latest
    steps:
      - name: Get Exchange binaries artifact name
        id: get_exchange_binaries
        run: |
          if [ "${{ needs.build_exchange.result }}" = "skipped" ]; then
            echo "exchange_build_artifact=${EXCHANGE_BUILD_ARTIFACT}" >> "$GITHUB_OUTPUT"
          elif [ "${{ needs.build_exchange.result }}" = "success" ]; then
            echo "exchange_build_artifact=app_exchange_binaries" >> "$GITHUB_OUTPUT"
          else
            echo "Not able to retrieve Exchange binaries artifact name" >&2
            exit 1
          fi
      - name: Get Ethereum binaries artifact name
        id: get_ethereum_binaries
        run: |
          if [ "${{ needs.build_ethereum.result }}" = "skipped" ]; then
            echo "ethereum_build_artifact=${ETHEREUM_BUILD_ARTIFACT}" >> "$GITHUB_OUTPUT"
          elif [ "${{ needs.build_ethereum.result }}" = "success" ]; then
            echo "ethereum_build_artifact=app_ethereum_binaries" >> "$GITHUB_OUTPUT"
          else
            echo "Not able to retrieve Ethereum binaries artifact name" >&2
            exit 1
          fi
      - name: Show artifact names
        run: |
          echo "Exchange build artifact: ${{ steps.get_exchange_binaries.outputs.exchange_build_artifact }}"
          echo "Ethereum build artifact: ${{ steps.get_ethereum_binaries.outputs.ethereum_build_artifact }}"

  get_swap_test_dir:
    name: Find swap test directory
    runs-on: ubuntu-latest
    outputs:
      swap_test_dir: ${{ steps.find_swap_test_dir.outputs.swap_test_dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.app_repository }}
          ref: ${{ inputs.app_branch_name }}
          path: app_coin
      - name: Install ledgered
        run: |
          python3 -m pip install ledgered
      - name: Find swap test directory
        id: find_swap_test_dir
        run: |
          cd app_coin
          # Get the swap test directory using ledger-manifest and jq
          swap_test_dir=$(ledger-manifest --output-pytest-directories -j -- ledger_app.toml | jq -r '.pytest_directories[1]')
          if [ -z "$swap_test_dir" ]; then
            echo "Swap test directory not found!" >&2
            exit 1
          fi
          echo "swap_test_dir=$swap_test_dir" >> "$GITHUB_OUTPUT"
      - name: Show found swap test directory
        run: |
          echo "Display found swap test directory"
          echo "Found swap test directory: ${{ steps.find_swap_test_dir.outputs.swap_test_dir }}"

  get_dir_names:
    name: Build artifact destination directories
    needs: get_swap_test_dir
    runs-on: ubuntu-latest
    outputs:
      swap_test_dir: ${{ steps.get_swap_test_dir.outputs.swap_test_dir }}
      main_app_dir: ${{ steps.get_swap_test_dir.outputs.main_app_dir }}
      lib_app_dir: ${{ steps.get_swap_test_dir.outputs.lib_app_dir }}
    steps:
      - name: Set swap test directories
        id: get_swap_test_dir
        run: |
          echo "swap_test_dir=${{ needs.get_swap_test_dir.outputs.swap_test_dir }}" >> "$GITHUB_OUTPUT"
          echo "main_app_dir=${{ needs.get_swap_test_dir.outputs.swap_test_dir }}/.test_dependencies/main/app-exchange/build" >> "$GITHUB_OUTPUT"
          echo "lib_app_dir=${{ needs.get_swap_test_dir.outputs.swap_test_dir }}/.test_dependencies/libraries/app-ethereum/build" >> "$GITHUB_OUTPUT"
      - name: Show swap test directories
        run: |
          echo "Swap test directory: ${{ steps.get_swap_test_dir.outputs.swap_test_dir }}"
          echo "Main app directory: ${{ steps.get_swap_test_dir.outputs.main_app_dir }}"
          echo "Lib app directory: ${{ steps.get_swap_test_dir.outputs.lib_app_dir }}"


  # This job runs the swap functional tests using the reusable workflow
  ragger_tests_swap:
    name: Run swap ragger tests using the reusable workflow
    needs: [get_artifacts_names, get_dir_names]
    uses: ./.github/workflows/reusable_ragger_tests.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      app_branch_name: ${{ inputs.app_branch_name }}
      download_app_binaries_artifact: ${{ inputs.download_app_binaries_artifact != '' && inputs.download_app_binaries_artifact || 'app_binaries' }}
      additional_app_binaries_artifact: ${{ needs.get_artifacts_names.outputs.exchange_build_artifact }}
      additional_app_binaries_artifact_dir: ${{ needs.get_dir_names.outputs.main_app_dir }}
      lib_binaries_artifact: ${{ needs.get_artifacts_names.outputs.ethereum_build_artifact }}
      lib_binaries_artifact_dir: ${{ needs.get_dir_names.outputs.lib_app_dir }}
      test_dir: ${{ needs.get_dir_names.outputs.swap_test_dir }}
      regenerate_snapshots: ${{ inputs.regenerate_snapshots }}
