name: Build the application for all devices and upload the artifact

on:
  workflow_call:
    inputs:
      app_repository:
        description: 'The GIT repository to build (defaults to `github.repository`)'
        required: false
        default: ${{ github.repository }}
        type: string
      app_branch_name:
        description: 'The GIT branch to build (defaults to `github.ref`)'
        required: false
        default: ${{ github.ref }}
        type: string
      relative_app_directory:
        description: 'The relative path in the repository where the application is built from (defaults to ".")'
        required: false
        default: '.'
        type: string
      flags:
        description: "Additional compilation flags (default to none)"
        required: false
        default: ''
        type: string
      upload_app_binaries_artifact:
        description: "The name of the artifact containing the built application binary file(s) to be tested"
        required: false
        default: ''
        type: string
      upload_as_lib_artifact:
        description: "If non-empty, prefixes the built application binary file(s) with this string (default to none)"
        required: false
        default: ''
        type: string
      run_for_devices:
        description: 'The list of device(s) on which the test will run (defaults to ["nanos", "nanox", "nanosp", "stax"])'
        required: false
        default: '["nanos", "nanox", "nanosp", "stax"]'
        type: string
      builder:
        description: "The docker image to build the application in (defaults to ledger-app-builder-lite)"
        required: false
        default: 'ledger-app-builder-lite'
        type: string

jobs:
  call_check_is_rust:
    name: Check if app is based on Rust
    uses: ./.github/workflows/_check_is_rust.yaml
    with:
      relative_app_directory: ${{ inputs.relative_app_directory }}

  build:
    name: Build application for NanoS, X, S+, and Stax
    needs: call_check_is_rust
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJSON(inputs.run_for_devices) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/${{ inputs.builder }}:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.app_repository }}
          ref: ${{ inputs.app_branch_name }}
          submodules: recursive

      - name: Build application
        shell: bash
        run: |
          if [[ "${{ needs.call_check_is_rust.outputs.is_rust }}" == "true" ]];
          then
              DEVICE_NAME="$(echo ${{ matrix.device }} | sed 's/nanosp/nanosplus/')" && \
              cd ${{ inputs.relative_app_directory }} && \
              cargo ledger build ${DEVICE_NAME} -- -Zunstable-options --out-dir=./build/${{ matrix.device }}/bin/
          else
              eval "BOLOS_SDK=\$$(echo ${{ matrix.device }} | tr [:lower:] [:upper:])_SDK" && \
              echo "BOLOS_SDK value will be: ${BOLOS_SDK}" && \
              make -C ${{ inputs.relative_app_directory }} -j ${{ inputs.flags }} BOLOS_SDK=${BOLOS_SDK}
          fi

      - name: Remove build artifacts before upload
        run: |
          find ${{ inputs.relative_app_directory }}/build/ -mindepth 2 -type d ! -name 'bin' -exec rm -r {} +

      - name: Prepare to upload as lib
        if: ${{ inputs.upload_as_lib_artifact != '' }}
        shell: bash
        run: |
          DEVICE_NAME="$(echo ${{ matrix.device }} | tr nanosp nanos2)" && \
          find ${{ inputs.relative_app_directory }}/build/${DEVICE_NAME}/ -type f -name 'app.elf' -exec mv {} ${{ inputs.upload_as_lib_artifact }}_${DEVICE_NAME}.elf \; && \
          rm -r ${{ inputs.relative_app_directory }}/build/* && \
          mv ${{ inputs.upload_as_lib_artifact }}_${DEVICE_NAME}.elf ${{ inputs.relative_app_directory }}/build/

      - name: Upload app binary
        if: ${{ inputs.upload_app_binaries_artifact != '' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.upload_app_binaries_artifact }}
          path: ${{ inputs.relative_app_directory }}/build/*
          if-no-files-found: error
