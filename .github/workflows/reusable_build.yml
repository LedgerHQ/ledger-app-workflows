name: Build the application for all devices and upload the artifact

on:
  workflow_call:
    inputs:
      app_repository:
        required: false
        default: ${{ github.repository }}
        type: string
      app_branch_name:
        required: false
        default: ${{ github.ref }}
        type: string
      relative_app_directory:
        required: false
        default: .
        type: string
      flags:
        required: false
        default: ''
        type: string
      upload_app_binaries_artifact:
        required: false
        default: ''
        type: string
      upload_as_lib_artifact:
        required: false
        default: ''
        type: string
      skip_stax:
        required: false
        default: false
        type: boolean
      builder:
        required: false
        default: 'ledger-app-builder-lite'
        type: string

jobs:
  build:
    name: Build application for NanoS, X, S+, and Stax
    strategy:
      fail-fast: false
      matrix:
        target:
          - SDK: "$NANOS_SDK"
            name: nanos
          - SDK: "$NANOX_SDK"
            name: nanox
          - SDK: "$NANOSP_SDK"
            name: nanos2
          - SDK: "$STAX_SDK"
            name: stax
    runs-on: ubuntu-latest
    if: ${{ !( inputs.skip_stax && matrix.target.name == 'stax' ) }}
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/${{ inputs.builder }}:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.app_repository }}
          ref: ${{ inputs.app_branch_name }}
          submodules: recursive

      - name: Build application
        run: |
          make -C ${{ inputs.relative_app_directory }} -j ${{ inputs.flags }} BOLOS_SDK=${{ matrix.target.SDK }}

      - name: Remove build artifacts before upload
        run: |
          find ${{ inputs.relative_app_directory }}/build/${{ matrix.target.name }}/ -mindepth 1 -type d ! -name 'bin' -exec rm -r {} +

      - name: Prepare to upload as lib
        if: ${{ inputs.upload_as_lib_artifact != '' }}
        run: |
          find ${{ inputs.relative_app_directory }}/build/${{ matrix.target.name }}/ -type f -name 'app.elf' -exec mv {} ${{ inputs.upload_as_lib_artifact }}_${{ matrix.target.name }}.elf \;
          rm -r ${{ inputs.relative_app_directory }}/build/*
          mv ${{ inputs.upload_as_lib_artifact }}_${{ matrix.target.name }}.elf ${{ inputs.relative_app_directory }}/build/

      - name: Upload app binary
        if: ${{ inputs.upload_app_binaries_artifact != '' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.upload_app_binaries_artifact }}
          path: ${{ inputs.relative_app_directory }}/build/*
          if-no-files-found: error
