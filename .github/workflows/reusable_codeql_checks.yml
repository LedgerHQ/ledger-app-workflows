name: Build the application for all devices and upload the artifact

on:
  workflow_call:
    inputs:
      app_repository:
        description: 'The GIT repository to build (defaults to `github.repository`)'
        required: false
        default: ${{ github.repository }}
        type: string
      app_branch_name:
        description: 'The GIT branch to build (defaults to `github.ref`)'
        required: false
        default: ${{ github.ref }}
        type: string
      run_for_devices:
        description: |
          The list of device(s) on which the CI will run.

          Defaults to the full list of device(s) supported by the application as configured in the
          'ledger_app.toml' manifest.
          If the manifest is missing, defaults to ALL (["nanos", "nanox", "nanosp", "stax", "flex", "apex_m", "apex_p"]).
        required: false
        default: 'None'
        type: string
      builder:
        description: "The docker image to build the application in (defaults to ledger-app-builder-lite)"
        required: false
        default: 'ledger-app-builder-lite'
        type: string
      flags:
        description: "Additional flags (default to none)"
        required: false
        default: ''
        type: string

permissions:
  contents: read
  security-events: write  # Needed for CodeQL analysis upload

jobs:
  call_get_app_metadata:
    # This job digests inputs and repository metadata provided by the `ledger_app.toml` manifest
    # file, in order to output relevant compatible devices needed by following jobs.
    name: Retrieve application metadata
    uses: ./.github/workflows/_get_app_metadata.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      app_branch_name: ${{ inputs.app_branch_name }}
      compatible_devices: ${{ inputs.run_for_devices }}
    secrets:
      token: ${{ secrets.token }}

  build_device_matrix:
    name: Build device matrix
    needs: call_get_app_metadata
    runs-on: ubuntu-latest
    outputs:
      sdks_config: ${{ steps.sdk_list.outputs.sdks_config }}

    steps:
      - name: Define the list of devices to target
        id: sdk_list
        shell: bash
        run: |
          if [ "${{ inputs.run_for_devices }}" = "None" ]; then
            # Use the compatible devices from metadata
            devices_json='${{ needs.call_get_app_metadata.outputs.compatible_devices }}'
          else
            # Convert space-separated string to JSON array
            devices_string="${{ inputs.run_for_devices }}"
            devices_json=$(echo "${devices_string}" | jq -R 'split(" ")')
          fi

          # Generate SDK environment variables from device names
          sdks_json=$(echo "${devices_json}" | jq -c 'map("$" + (. | ascii_upcase) + "_SDK")')

          echo "sdks_config=${sdks_json}" >> "$GITHUB_OUTPUT"

      - name: Print devices and SDKs
        run: |
          echo "SDKs: ${{ steps.sdk_list.outputs.sdks_config }}"

  analyse:
    name: Analyse application
    needs: build_device_matrix
    strategy:
      fail-fast: false
      matrix:
        sdk: ${{ fromJSON(needs.build_device_matrix.outputs.sdks_config) }}
        # 'cpp' covers C and C++
        language: ['cpp']
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/${{ inputs.builder }}:latest

    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.app_repository }}
          ref: ${{ inputs.app_branch_name }}
          submodules: recursive
          token: ${{ secrets.token && secrets.token || github.token }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      # CodeQL will create the database during the compilation
      - name: Build
        run: |
          ${{ inputs.flags }} make BOLOS_SDK=${{ matrix.sdk }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
