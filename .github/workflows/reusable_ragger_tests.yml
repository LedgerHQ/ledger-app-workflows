---
name: Functional tests using Ragger

on:
  workflow_call:
    inputs:
      app_repository:
        description: 'The GIT repository to test (defaults to `github.repository`)'
        required: false
        default: ${{ github.repository }}
        type: string
      app_branch_name:
        description: 'The GIT branch to test (defaults to `github.ref`)'
        required: false
        default: ${{ github.ref }}
        type: string
      test_dir:
        description: |
          The directory where the Python tests are stored (a `conftest.py` file is expected there).

          If the application is configured with a 'ledger_app.toml' file at its root containing a
          `test.pytest_directory` field, this parameter is ignored.
          If this parameter is defined neither as a workflow input nor in the manifest file, the
          workflow will output an error.
        required: false
        default: 'None'
        type: string
      download_app_binaries_artifact:
        description: 'The name of the artifact containing the application binary file(s) to be tested. Required'
        required: true
        type: string
      additional_app_binaries_artifact:
        description: 'The name of the artifact containing the additional app binary file(s), if needed by the application to be tested (defaults to empty string)'
        required: false
        default: ''
        type: string
      additional_app_binaries_artifact_dir:
        description: 'The directory where the additional app binaries will be downloaded (defaults to ".")'
        required: false
        default: '.'
        type: string
      lib_binaries_artifact:
        description: 'The name of the artifact containing the library binary file(s), if needed by the application to be tested (defaults to empty string)'
        required: false
        default: ''
        type: string
      run_for_devices:
        description: |
          The list of device(s) on which the test will run.

          Defaults to the full list of device(s) supported by the application as configured in the
          'ledger_app.toml' manifest.
          If the manifest is missing, defaults to ALL (["nanos", "nanox", "nanosp", "stax"]).
        required: false
        default: 'None'
        type: string
      upload_snapshots_on_failure:
        description: 'Enable or disable upload of tests snapshots if the job fails (defaults to true).'
        required: false
        default: true
        type: boolean
      test_filter:
        description: 'Specify an expression which implements a substring match on the test names'
        required: false
        default: '""'
        type: string

jobs:
  call_get_app_metadata:
    # This job digests inputs and repository metadata provided by the `ledger_app.toml` manifest
    # file, in order to output relevant directories, compatible devices, and other variables needed
    # by following jobs.
    name: Retrieve application metadata
    uses: ./.github/workflows/_get_app_metadata.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      app_branch_name: ${{ inputs.app_branch_name }}
      compatible_devices: ${{ inputs.run_for_devices }}
      pytest_directory: ${{ inputs.test_dir }}

  ragger_tests:
    name: Functional tests with Ragger
    needs: call_get_app_metadata
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJSON(needs.call_get_app_metadata.outputs.compatible_devices) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-dev-tools:latest

    steps:
      - name: Check metadata
        run: |
          if [[ '${{ needs.call_get_app_metadata.outputs.pytest_directory }}' == 'None' ]];
          then
              >&2 echo "ERROR: This workflow either needs a 'ledger_app.toml' manifest with a 'tests.pytest_directory' section, or be configured with a valid 'test_dir' parameter";
              exit 1;
          fi

      - name: Clone
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.app_repository }}
          ref: ${{ inputs.app_branch_name }}
          submodules: recursive

      - name: Download app binaries
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.download_app_binaries_artifact }}
          path: ${{ needs.call_get_app_metadata.outputs.build_directory }}/build/

      - name: Download additional app binaries if required
        if: ${{ inputs.additional_app_binaries_artifact != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.additional_app_binaries_artifact }}
          path: ${{ inputs.additional_app_binaries_artifact_dir }}

      - name: Download additional lib binaries if required
        if: ${{ inputs.lib_binaries_artifact != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.lib_binaries_artifact }}
          path: ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/lib_binaries/

      - name: Install tests dependencies
        run: |
          pip install -U pip setuptools
          pip install -r "${{ needs.call_get_app_metadata.outputs.pytest_directory }}/requirements.txt"

      - name: Run test
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
        run: pytest ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/ --tb=short -v --device ${{ matrix.device }} -k ${{ inputs.test_filter }}

      - name: Upload snapshots
        if: ${{ failure() && inputs.upload_snapshots_on_failure == true }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.device }}-tests-snapshots
          path: ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/snapshots-tmp/${{ matrix.device }}
