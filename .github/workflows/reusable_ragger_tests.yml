---
name: Functional tests using Ragger

on:
  workflow_call:
    inputs:
      app_repository:
        description: 'The GIT repository to test (defaults to `github.repository`)'
        required: false
        default: ${{ github.repository }}
        type: string
      app_branch_name:
        description: 'The GIT branch to test (defaults to `github.ref`)'
        required: false
        default: ${{ github.ref }}
        type: string
      test_dir:
        description: |
          The directory where the Python tests are stored (a `conftest.py` file is expected there).

          If the application is configured with a 'ledger_app.toml' file at its root containing a
          `test.pytest_directory` field, this parameter is ignored.
          If this parameter is defined neither as a workflow input nor in the manifest file, the
          workflow will output an error.
        required: false
        default: 'None'
        type: string
      download_app_binaries_artifact:
        description: 'The name of the artifact containing the application binary file(s) to be tested. Required'
        required: true
        type: string
      additional_app_binaries_artifact:
        description: 'The name of the artifact containing the additional app binary file(s), if needed by the application to be tested (defaults to empty string)'
        required: false
        default: ''
        type: string
      additional_app_binaries_artifact_dir:
        description: 'The directory where the additional app binaries will be downloaded (defaults to ".")'
        required: false
        default: '.'
        type: string
      lib_binaries_artifact:
        description: 'The name of the artifact containing the library binary file(s), if needed by the application to be tested (defaults to empty string)'
        required: false
        default: ''
        type: string
      run_for_devices:
        description: |
          The list of device(s) on which the test will run.

          Defaults to the full list of device(s) supported by the application as configured in the
          'ledger_app.toml' manifest.
          If the manifest is missing, defaults to ALL (["nanos", "nanox", "nanosp", "stax", "flex"]).
        required: false
        default: 'None'
        type: string
      upload_snapshots_on_failure:
        description: 'Enable or disable upload of tests snapshots if the job fails (defaults to true).'
        required: false
        default: true
        type: boolean
      test_filter:
        description: 'Specify an expression which implements a substring match on the test names'
        required: false
        default: '""'
        type: string
      test_options:
        description: 'Specify optional parameters to be passed to the running test'
        required: false
        default: ''
        type: string
      regenerate_snapshots:
        description: 'Clean snapshots, regenerate them, commit the changes in a branch, and open a PR'
        required: false
        default: false
        type: boolean
      container_image:
        description: 'Optional container image to run the ragger_tests job'
        required: false
        default: ''
        type: string
    secrets:
      secret_test_options:
        description: 'A string of secret options to be given to `pytest`'
        required: false
jobs:
  call_get_app_metadata:
    # This job digests inputs and repository metadata provided by the `ledger_app.toml` manifest
    # file, in order to output relevant directories, compatible devices, and other variables needed
    # by following jobs.
    name: Retrieve application metadata
    uses: ./.github/workflows/_get_app_metadata.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      app_branch_name: ${{ inputs.app_branch_name }}
      compatible_devices: ${{ inputs.run_for_devices }}
      pytest_directory: ${{ inputs.test_dir }}

  ragger_tests:
    name: Functional tests with Ragger
    needs: call_get_app_metadata
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJSON(needs.call_get_app_metadata.outputs.compatible_devices) }}
    runs-on: ubuntu-22.04
    container: ${{ inputs.container_image != '' && inputs.container_image || null }}

    steps:
      - name: Check metadata
        run: |
          if [ '${{ needs.call_get_app_metadata.outputs.pytest_directory }}' = 'None' ]; then
              >&2 echo "ERROR: This workflow either needs a 'ledger_app.toml' manifest with a 'tests.pytest_directory' section, or be configured with a valid 'test_dir' parameter"
              exit 1
          fi

      - name: Clone
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.app_repository }}
          ref: ${{ inputs.app_branch_name }}
          submodules: recursive

      - name: Set binary path
        id: "set_binary_path"
        run: |
          if [ "${{ needs.call_get_app_metadata.outputs.is_rust }}" = "true" ];
          then
              echo "Set Rust binary path" && \
              cd ${{ needs.call_get_app_metadata.outputs.build_directory }} && \
              binary_path=$(cargo metadata --no-deps --format-version 1 | jq -r '.target_directory')/ && \
              echo "binary_path=$binary_path" >> $GITHUB_OUTPUT
          else
              echo "binary_path=${{ needs.call_get_app_metadata.outputs.build_directory }}/build/" >> $GITHUB_OUTPUT
          fi

      - name: Download app binaries
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.download_app_binaries_artifact }}
          path: ${{ steps.set_binary_path.outputs.binary_path }}

      - name: Display structure of downloaded files
        run: |
          if [ "${{ needs.call_get_app_metadata.outputs.is_rust }}" = "true" ]; then
            ls -R ${{ env.binary_path }}
          else
            ls -R ${{ needs.call_get_app_metadata.outputs.build_directory }}
          fi

      - name: Download additional app binaries if required
        if: ${{ inputs.additional_app_binaries_artifact != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.additional_app_binaries_artifact }}
          path: ${{ inputs.additional_app_binaries_artifact_dir }}

      - name: Display structure of downloaded files
        if: ${{ inputs.additional_app_binaries_artifact != '' }}
        run: ls -R ${{ inputs.additional_app_binaries_artifact_dir }}

      - name: Download additional lib binaries if required
        if: ${{ inputs.lib_binaries_artifact != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.lib_binaries_artifact }}
          path: ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/lib_binaries/

      - name: Display structure of downloaded files
        if: ${{ inputs.lib_binaries_artifact != '' }}
        run: ls -R ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/lib_binaries/

      - name: Install tests dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-user-static tesseract-ocr libtesseract-dev
          pip install -U pip packaging setuptools
          pip install -r "${{ needs.call_get_app_metadata.outputs.pytest_directory }}/requirements.txt"
          if [ -f ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/setup_script.sh ]; then
            ./${{ needs.call_get_app_metadata.outputs.pytest_directory }}/setup_script.sh
          fi

      - name: Run test
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
        run: |
          pytest ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/ \
                 --tb=short -v \
                 --device ${{ matrix.device }} \
                 -k ${{ inputs.test_filter }} \
                 ${{ inputs.test_options }} \
                 ${{ secrets.secret_test_options }} \
                 ${{ inputs.regenerate_snapshots == true && '--golden_run' || '' }}

      - name: Upload snapshots on failure if needed
        if: ${{ failure() && inputs.upload_snapshots_on_failure == true }}
        uses: actions/upload-artifact@v4
        with:
          # Make the artifact name unique to allow running this job in parallel
          name: tests_snapshots${{ inputs.test_options }}-${{ matrix.device }}
          path: ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/snapshots-tmp

      - name: Upload snapshots on success if needed
        if: ${{ inputs.regenerate_snapshots == true }}
        uses: actions/upload-artifact@v4
        with:
          name: tests_snapshots${{ inputs.test_options }}-${{ matrix.device }}
          path: ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/snapshots-tmp

      - name: Set upload flag
        id: upload-flag
        if: ${{ (failure() && inputs.upload_snapshots_on_failure == true) || ( success() && inputs.regenerate_snapshots == true) }}
        run: |
          echo "artifact_uploaded=true" >> "$GITHUB_OUTPUT"

    outputs:
      snapshot_artifact_uploaded: ${{ steps.upload-flag.outputs.artifact_uploaded }}

  merge_artifacts_if_needed:
    # Merge matrix output
    name: Merge snapshots artifacts
    needs: ragger_tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/upload-artifact/merge@v4
        if: ${{ needs.ragger_tests.outputs.snapshot_artifact_uploaded == 'true' }}
        with:
          name: tests_snapshots${{ inputs.test_options }}
          pattern: tests_snapshots${{ inputs.test_options }}-*
          delete-merged: true

    outputs:
      snapshot_artifact_name: tests_snapshots${{ inputs.test_options }}

  pr_new_snapshots:
    name: Open a PR with the new snapshots
    needs: [merge_artifacts_if_needed, call_get_app_metadata]
    if: ${{ inputs.regenerate_snapshots == true }}
    uses: ./.github/workflows/_open_pr_with_new_snapshots.yml
    with:
      app_repository: ${{ inputs.app_repository }}
      app_branch_name: ${{ inputs.app_branch_name }}
      snapshots_artifact_name: ${{ needs.merge_artifacts_if_needed.outputs.snapshot_artifact_name }}
      snapshots_directory: ${{ needs.call_get_app_metadata.outputs.pytest_directory }}/snapshots
